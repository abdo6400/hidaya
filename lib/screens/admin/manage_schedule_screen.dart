import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../controllers/schedules_controller.dart';
import '../../models/schedule_model.dart';
import '../../models/user_model.dart';
import '../../models/category_model.dart';
import '../../controllers/category_controller.dart';
import '../../controllers/sheiks_controller.dart';

class ManageScheduleScreen extends ConsumerStatefulWidget {
  final String? sheikhId; // Optional - if provided, we're editing a sheikh's schedule

  const ManageScheduleScreen({super.key, this.sheikhId});

  @override
  ConsumerState<ManageScheduleScreen> createState() => _ManageScheduleScreenState();
}

class _ManageScheduleScreenState extends ConsumerState<ManageScheduleScreen> {
  AppUser? selectedSheikh;
  final List<DayScheduleWidget> daySchedules = [];
  final TextEditingController notesController = TextEditingController();

  final List<String> weekDays = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday'
  ];

  @override
  void initState() {
    super.initState();
    // Initialize empty schedules for each day
    for (var day in weekDays) {
      daySchedules.add(DayScheduleWidget(
        key: GlobalKey<_DayScheduleWidgetState>(),
        day: day,
        onChanged: () => setState(() {}),
      ));
    }
  }

  @override
  Widget build(BuildContext context) {
    final sheikhsAsyncValue = ref.watch(sheiksControllerProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Manage Schedule'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Sheikh Selection (if not provided)
            if (widget.sheikhId == null)
              sheikhsAsyncValue.when(
                data: (sheikhs) => DropdownButtonFormField<AppUser>(
                  value: selectedSheikh,
                  decoration: const InputDecoration(
                    labelText: 'Select Sheikh',
                    border: OutlineInputBorder(),
                  ),
                  items: sheikhs.map((sheikh) {
                    return DropdownMenuItem(
                      value: sheikh,
                      child: Text(sheikh.username),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      selectedSheikh = value;
                    });
                  },
                ),
                loading: () => const CircularProgressIndicator(),
                error: (error, stack) => Text('Error: $error'),
              ),

            const SizedBox(height: 24),
            
            // Notes field
            TextField(
              controller: notesController,
              decoration: const InputDecoration(
                labelText: 'Schedule Notes',
                border: OutlineInputBorder(),
                hintText: 'Add any general notes about the schedule',
              ),
              maxLines: 2,
            ),

            const SizedBox(height: 24),

            // Day schedules
            ...daySchedules,

            const SizedBox(height: 24),

            // Save button
            ElevatedButton(
              onPressed: _canSave() ? _saveSchedule : null,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: const Text('Save Schedule'),
            ),
          ],
        ),
      ),
    );
  }

  bool _canSave() {
    // Need either a provided sheikhId or a selected sheikh
    final hasValidSheikh = widget.sheikhId != null || selectedSheikh != null;
    if (!hasValidSheikh) {
      return false;
    }

    // Check if any day has valid time slots (with times and category selected)
    final hasValidTimeSlots = daySchedules.any((day) {
      print('Checking day ${day.day}: hasTimeSlots=${day.hasTimeSlots()}'); // Debug print
      return day.hasTimeSlots();
    });

    print('Can save: $hasValidTimeSlots'); // Debug print
    return hasValidTimeSlots;
  }

  void _saveSchedule() async {
    try {
      final sheikhId = widget.sheikhId ?? selectedSheikh!.id;
      
      final schedule = ScheduleModel(
        id: '', // Will be generated by Firestore
        sheikhId: sheikhId,
        days: daySchedules
            .map((widget) => widget.toDaySchedule())
            .where((day) => day.timeSlots.isNotEmpty)
            .toList(),
        notes: notesController.text,
      );

      // Save the schedule
      await ref.read(schedulesControllerProvider('all').notifier).addSchedule(schedule);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Schedule saved successfully!')),
        );
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving schedule: $e')),
        );
      }
    }
  }
}

class DayScheduleWidget extends StatefulWidget {
  final String day;
  final VoidCallback onChanged;

  const DayScheduleWidget({
    super.key,
    required this.day,
    required this.onChanged,
  });

  _DayScheduleWidgetState? get _state => key != null ? (key as GlobalKey<_DayScheduleWidgetState>).currentState : null;

  bool hasTimeSlots() {
    return _state?.hasValidTimeSlots() ?? false;
  }

  DaySchedule toDaySchedule() {
    // Convert string day to WeekDay enum
    final weekDay = WeekDay.values.firstWhere(
      (d) => d.name == day.toLowerCase(),
      orElse: () => WeekDay.sunday,
    );
    
    return DaySchedule(
      day: weekDay,
      timeSlots: _state?.getTimeSlots() ?? [],
    );
  }


  @override
  State<DayScheduleWidget> createState() => _DayScheduleWidgetState();
}

class _DayScheduleWidgetState extends State<DayScheduleWidget> {
  final List<GlobalKey<_TimeSlotWidgetState>> _slotKeys = [];
  final List<TimeSlotWidget> timeSlots = [];

  bool hasValidTimeSlots() {
    return _slotKeys.any((key) {
      final state = key.currentState;
      return state != null && state.isValid();
    });
  }

  List<TimeSlot> getTimeSlots() {
    return _slotKeys
        .map((key) => key.currentState)
        .where((state) => state != null && state.isValid())
        .map((state) => state!.toTimeSlot())
        .toList();
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  widget.day,
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                TextButton.icon(
                  icon: const Icon(Icons.add),
                  label: const Text('Add Time Slot'),
                  onPressed: _addTimeSlot,
                ),
              ],
            ),
            if (timeSlots.isNotEmpty) ...[
              const SizedBox(height: 16),
              ...timeSlots,
            ],
          ],
        ),
      ),
    );
  }

  void _addTimeSlot() {
    final key = GlobalKey<_TimeSlotWidgetState>();
    setState(() {
      _slotKeys.add(key);
      timeSlots.add(
        TimeSlotWidget(
          key: key,
          onDelete: (slot) {
            setState(() {
              final index = timeSlots.indexOf(slot);
              if (index != -1) {
                timeSlots.removeAt(index);
                _slotKeys.removeAt(index);
              }
              widget.onChanged();
            });
          },
          onChanged: widget.onChanged,
        ),
      );
      widget.onChanged();
    });
  }
}

class TimeSlotWidget extends ConsumerStatefulWidget {
  final Function(TimeSlotWidget) onDelete;
  final VoidCallback onChanged;

  const TimeSlotWidget({
    super.key,
    required this.onDelete,
    required this.onChanged,
  });

  @override
  ConsumerState<TimeSlotWidget> createState() => _TimeSlotWidgetState();
}

class _TimeSlotWidgetState extends ConsumerState<TimeSlotWidget> {
  TimeOfDay? startTime;
  TimeOfDay? endTime;
  CategoryModel? selectedCategory;

  bool isValid() {
    return startTime != null && endTime != null && selectedCategory != null;
  }

  TimeSlot toTimeSlot() {
    if (!isValid()) {
      throw StateError('Cannot create TimeSlot from invalid state');
    }

    return TimeSlot(
      startTime: _formatTime(startTime!),
      endTime: _formatTime(endTime!),
      categoryId: selectedCategory!.id,
    );
  }

  String _formatTime(TimeOfDay time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    final categoriesAsyncValue = ref.watch(categoryControllerProvider);

    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            Row(
              children: [
                Expanded(
                  child: TextButton.icon(
                    icon: const Icon(Icons.access_time),
                    label: Text(startTime?.format(context) ?? 'Start Time'),
                    onPressed: () => _selectTime(true),
                  ),
                ),
                const Text(' - '),
                Expanded(
                  child: TextButton.icon(
                    icon: const Icon(Icons.access_time),
                    label: Text(endTime?.format(context) ?? 'End Time'),
                    onPressed: () => _selectTime(false),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.delete),
                  onPressed: () => widget.onDelete(widget),
                ),
              ],
            ),
            const SizedBox(height: 8),
            categoriesAsyncValue.when(
              data: (categories) => DropdownButtonFormField<CategoryModel>(
                value: selectedCategory,
                decoration: const InputDecoration(
                  labelText: 'Select Category',
                  border: OutlineInputBorder(),
                ),
                items: categories.map((category) {
                  return DropdownMenuItem(
                    value: category,
                    child: Text(category.name),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    selectedCategory = value;
                    widget.onChanged();
                  });
                },
              ),
              loading: () => const CircularProgressIndicator(),
              error: (error, stack) => Text('Error: $error'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _selectTime(bool isStartTime) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: isStartTime ? startTime ?? TimeOfDay.now() : endTime ?? TimeOfDay.now(),
    );

    if (picked != null) {
      setState(() {
        if (isStartTime) {
          startTime = picked;
        } else {
          endTime = picked;
        }
      });
      widget.onChanged(); // Call after setState
    }
  }
}
